import org.gradle.api.tasks.testing.logging.TestLogEvent.*
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.gradle.api.artifacts.Dependency as GradleDependency
import java.net.URI

plugins {
    kotlin("jvm") version "1.4.31"
    kotlin("kapt") version "1.4.31"
    `java-library`
    `maven-publish`
    signing
}

group = "pl.rzrz"
version = "1.1.9"
description = "Autogenerated test factories for Kotlin"

java.sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

val coreDependencies: Configuration by configurations.creating
val core: SourceSet by sourceSets.creating {
    java.srcDir(file("src/core/kotlin"))
    compileClasspath += coreDependencies
}

val generatorDependencies: Configuration by configurations.creating
val generator: SourceSet by sourceSets.creating {
    java.srcDir(file("src/generator/kotlin"))
    resources.srcDir(file("src/generator/resources"))
    compileClasspath += core.compileClasspath + core.output + generatorDependencies
    runtimeClasspath += compileClasspath
}

dependencies {
    coreDependencies("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    coreDependencies("org.jetbrains.kotlin:kotlin-reflect")

    generatorDependencies("com.squareup:kotlinpoet:1.7.2")
    generatorDependencies(core.output)

    testImplementation(platform("org.junit:junit-bom:5.7.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.assertj:assertj-core:3.18.1")
    testImplementation(core.compileClasspath + core.output)
    testImplementation(generator.compileClasspath + generator.output)

    kaptTest(generator.compileClasspath + generator.output)
}

tasks.withType<Test> {
    useJUnitPlatform()
    testLogging.events(STARTED, FAILED, PASSED, SKIPPED, STANDARD_OUT)
}

tasks.withType<KotlinCompile>().configureEach {
    kotlinOptions {
        freeCompilerArgs = freeCompilerArgs + "-Xopt-in=kotlin.RequiresOptIn"
        jvmTarget = "1.8"
    }
}

val coreJar: Task by tasks.creating(Jar::class) {
    archiveFileName.set("kotlin-test-factories-core.jar")
    from(core.output)
}

val coreSourcesJar: Task by tasks.creating(Jar::class) {
    archiveFileName.set("kotlin-test-factories-core-sources.jar")
    archiveClassifier.set("sources")
    from(core.allSource)
}

val coreJavadoc: Task by tasks.creating(Javadoc::class) {
    source = core.allJava
}

val coreJavadocJar: Task by tasks.creating(Jar::class) {
    archiveFileName.set("kotlin-test-factories-core-javadoc.jar")
    archiveClassifier.set("javadoc")

    from(coreJavadoc)
}

val generatorJar: Task by tasks.creating(Jar::class) {
    archiveFileName.set("kotlin-test-factories-generator.jar")
    from(generator.output)
}

val generatorSourcesJar: Task by tasks.creating(Jar::class) {
    archiveFileName.set("kotlin-test-factories-generator-sources.jar")
    archiveClassifier.set("sources")
    from(generator.allSource)
}

val generatorJavadoc: Task by tasks.creating(Javadoc::class) {
    source = generator.allJava
}

val generatorJavadocJar: Task by tasks.creating(Jar::class) {
    archiveFileName.set("kotlin-test-factories-generator-javadoc.jar")
    archiveClassifier.set("javadoc")

    from(generatorJavadoc)
}

tasks.jar.configure {
    enabled = false
}

tasks.build.configure {
    finalizedBy(coreJar, coreSourcesJar, generatorJar, generatorSourcesJar)
}

val githubPath = "jacek-rzrz/kotlin-test-factories"
val githubUrl = "https://github.com/$githubPath"

val publicationName: String by project

fun selectJar() = when (publicationName) {
    "core" -> coreJar
    "generator" -> generatorJar
    else -> null
}

fun selectSourcesJar() = when (publicationName) {
    "core" -> coreSourcesJar
    "generator" -> generatorSourcesJar
    else -> null
}

fun selectJavadocJar() = when (publicationName) {
    "core" -> coreJavadocJar
    "generator" -> generatorJavadocJar
    else -> null
}

fun Configuration.externalDependencies(): Collection<Dependency> {
    return allDependencies.mapNotNull { Dependency.from(it) }
}

fun selectDependencies() = when(publicationName) {
    "core" -> coreDependencies.externalDependencies()
    "generator" -> generatorDependencies.externalDependencies() + listOf(
            Dependency(group.toString(), "kotlin-test-factories-core", version.toString())
    )
    else -> emptyList()
}

data class Dependency(val group: String, val artifactId: String, val version: String) {
    companion object {
        fun from(dependency: GradleDependency): Dependency? {
            val group = dependency.group ?: return null
            val version = dependency.version ?: return null
            return Dependency(
                    group,
                    dependency.name,
                    version
            )
        }

    }
}

publishing {
    if(publicationName.isNotBlank()) {

        publications {
            create<MavenPublication>(publicationName) {
                groupId = project.group.toString()
                artifactId = "kotlin-test-factories-$publicationName"
                version = project.version.toString()

                pom {
                    name.set(artifactId)
                    description.set(project.description)
                    url.set(githubUrl)

                    withXml {
                        asNode().appendNode("dependencies").apply {
                            selectDependencies().forEach {
                                appendNode("dependency").apply {
                                    appendNode("groupId", it.group)
                                    appendNode("artifactId", it.artifactId)
                                    appendNode("version", it.version)
                                }
                            }
                        }
                    }

                    licenses {
                        license {
                            name.set("The Apache Software License, Version 2.0")
                            url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                            distribution.set("repo")
                        }
                    }

                    developers {
                        developer {
                            name.set("Jacek Rzrz")
                            email.set("jacek@rzrz.pl")
                        }
                    }

                    scm {
                        url.set("$githubUrl/tree/master")
                        connection.set("scm:git:git://github.com/$githubPath.git")
                        developerConnection.set("scm:git:ssh://github.com:$githubPath.git")
                    }
                }

                artifact(selectJar())
                artifact(mapOf(
                        "source" to selectSourcesJar(),
                        "classifier" to "sources",
                        "extension" to "jar"
                ))
                artifact(mapOf(
                        "source" to selectJavadocJar(),
                        "classifier" to "javadoc",
                        "extension" to "jar"
                ))

                repositories {
                    maven {
                        url = URI.create("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
                        credentials {
                            val nexusUsername: String by project
                            val nexusPassword: String by project
                            username = nexusUsername
                            password = nexusPassword
                        }
                    }
                }
            }
        }
    }
}

signing {
    if(publicationName.isNotBlank()) {
        sign(publishing.publications[publicationName])
    }
}

tasks.create("printVersion") {
    doLast {
        println(project.version)
    }
}